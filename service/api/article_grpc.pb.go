// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	ViewDraftedArticles(ctx context.Context, in *ViewDraftedArticlesRequest, opts ...grpc.CallOption) (*ViewDraftedArticlesResponse, error)
	View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	ViewOwnPublishedArticles(ctx context.Context, in *ViewOwnPublishedArticlesRequest, opts ...grpc.CallOption) (*ViewOwnPublishedArticlesResponse, error)
	Draft(ctx context.Context, in *DraftRequest, opts ...grpc.CallOption) (*DraftResponse, error)
	ViewAllArticles(ctx context.Context, in *ViewAllArticlesRequest, opts ...grpc.CallOption) (*ViewAllArticlesResponse, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ViewDraftedArticles(ctx context.Context, in *ViewDraftedArticlesRequest, opts ...grpc.CallOption) (*ViewDraftedArticlesResponse, error) {
	out := new(ViewDraftedArticlesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/ViewDraftedArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error) {
	out := new(ViewResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ViewOwnPublishedArticles(ctx context.Context, in *ViewOwnPublishedArticlesRequest, opts ...grpc.CallOption) (*ViewOwnPublishedArticlesResponse, error) {
	out := new(ViewOwnPublishedArticlesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/ViewOwnPublishedArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Draft(ctx context.Context, in *DraftRequest, opts ...grpc.CallOption) (*DraftResponse, error) {
	out := new(DraftResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/Draft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ViewAllArticles(ctx context.Context, in *ViewAllArticlesRequest, opts ...grpc.CallOption) (*ViewAllArticlesResponse, error) {
	out := new(ViewAllArticlesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/ViewAllArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	ViewDraftedArticles(context.Context, *ViewDraftedArticlesRequest) (*ViewDraftedArticlesResponse, error)
	View(context.Context, *ViewRequest) (*ViewResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	ViewOwnPublishedArticles(context.Context, *ViewOwnPublishedArticlesRequest) (*ViewOwnPublishedArticlesResponse, error)
	Draft(context.Context, *DraftRequest) (*DraftResponse, error)
	ViewAllArticles(context.Context, *ViewAllArticlesRequest) (*ViewAllArticlesResponse, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) Save(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedArticleServiceServer) ViewDraftedArticles(context.Context, *ViewDraftedArticlesRequest) (*ViewDraftedArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewDraftedArticles not implemented")
}
func (UnimplementedArticleServiceServer) View(context.Context, *ViewRequest) (*ViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedArticleServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedArticleServiceServer) ViewOwnPublishedArticles(context.Context, *ViewOwnPublishedArticlesRequest) (*ViewOwnPublishedArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewOwnPublishedArticles not implemented")
}
func (UnimplementedArticleServiceServer) Draft(context.Context, *DraftRequest) (*DraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Draft not implemented")
}
func (UnimplementedArticleServiceServer) ViewAllArticles(context.Context, *ViewAllArticlesRequest) (*ViewAllArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAllArticles not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ViewDraftedArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewDraftedArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ViewDraftedArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/ViewDraftedArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ViewDraftedArticles(ctx, req.(*ViewDraftedArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).View(ctx, req.(*ViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ViewOwnPublishedArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewOwnPublishedArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ViewOwnPublishedArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/ViewOwnPublishedArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ViewOwnPublishedArticles(ctx, req.(*ViewOwnPublishedArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Draft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Draft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/Draft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Draft(ctx, req.(*DraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ViewAllArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAllArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ViewAllArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/ViewAllArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ViewAllArticles(ctx, req.(*ViewAllArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _ArticleService_Save_Handler,
		},
		{
			MethodName: "ViewDraftedArticles",
			Handler:    _ArticleService_ViewDraftedArticles_Handler,
		},
		{
			MethodName: "View",
			Handler:    _ArticleService_View_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ArticleService_Publish_Handler,
		},
		{
			MethodName: "ViewOwnPublishedArticles",
			Handler:    _ArticleService_ViewOwnPublishedArticles_Handler,
		},
		{
			MethodName: "Draft",
			Handler:    _ArticleService_Draft_Handler,
		},
		{
			MethodName: "ViewAllArticles",
			Handler:    _ArticleService_ViewAllArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
